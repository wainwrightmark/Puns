@page "/puns"
@using System.Linq
@using Microsoft.AspNetCore.WebUtilities
@using WordNet
@inject NavigationManager NavManager


<MatAutocompleteList Items="@_themeSuggestions" TItem="string" Label="Any Word" ShowClearButton="true" OnTextChanged="s => State.Theme = s" Value="@State.Theme">@State.Theme</MatAutocompleteList>


@foreach (var synSet in State.AllSynSets)
{
    <br/>

    <MatCheckbox @bind-Value="@synSet.Chosen" Label="@synSet.Entity.gloss"></MatCheckbox>
}
<br/>

<p>
    <MatSelectItem Label="Category" @bind-Value="@State.PunCategory"  Items="@State.PossibleCategories"></MatSelectItem>
</p>

<br/>

<MatDivider/>

<br />

@if (!State.PunList.Any())
{
    @if (State.IsGenerating)
    {
        <MatProgressBar Indeterminate="true"/>
    }
    else if (State.CanGenerate)
    {
        <MatFAB @onclick="State.Find" Label="Punder"/>
    }
}
else
{
    var totalResults = State.PunList.Select(x => x.Count()).Prepend(0).Sum();

    <MatAccordion>
        @foreach (var grouping in State.PunList)
        {
            var isSmallGroup = grouping.Count() < 4 || totalResults < 20;

            <MatExpansionPanel Expanded="@isSmallGroup">
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>@grouping.Key</MatExpansionPanelHeader>
                    @if (!isSmallGroup)
                    {
                        <MatExpansionPanelSubHeader>
                            @grouping.Count()
                        </MatExpansionPanelSubHeader>
                    }
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <MatList TwoLine="true">
                        @foreach (var pun in grouping)
                        {
                            <MatListItem >
                                <MatListItemText>
                                    <MatListItemPrimaryText>@pun.NewPhrase</MatListItemPrimaryText>
                                    @if (pun.IsNewDifferent)
                                    {
                                        <MatListItemSecondaryText>@pun.OldPhrase</MatListItemSecondaryText>
                                    }
                                    else
                                    {
                                        <MatListItemSecondaryText/>
                                    }

                                </MatListItemText>
                            </MatListItem>
                        }
                    </MatList>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>
        }
    </MatAccordion>
}




@code {

        const string DefaultTheme = "";

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        var punImmediately = true;

        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("theme", out var theme))
        {
            theme = DefaultTheme;
            punImmediately = false;
        }

        PunCategory? pc;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var categoryString) && Enum.TryParse(categoryString, true, out PunCategory category))
        {
            pc = category;
        }
        else
        {
            pc = null;
            punImmediately = false;
        }

        State = new PunState(theme, pc, StateHasChanged);

        if (punImmediately)
           await State.Find();

        await base.OnInitializedAsync();
    }

    public PunState State { get; private set; }

    string[] _themeSuggestions = new[]
    {
        "Fish",
        "Furniture",
        "Vegetable",
        "Cake",
        "Baby"
    };

}