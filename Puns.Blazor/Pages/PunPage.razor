@page "/puns"
@using System.Linq
@using Microsoft.AspNetCore.WebUtilities
@using WordNet
@inject NavigationManager NavManager


<AutoComplete Options="@_themeSuggestions" Placeholder="Theme" @bind-Value="@State.Theme"/>




<Select Mode="multiple"
        Bordered="false"
        DataSource="@State.PossibleSynsets"
        Placeholder="Meaning"
        Disabled="@(!State.PossibleSynsets.Any())"
		TItemValue="int"
        TItem="SynsetWithGloss"
        @bind-Values="@State.ChosenSynsets"
        OnSelectedItemsChanged="@(_=>State.ClearPuns())"
        ValueName="@nameof(SynsetWithGloss.Index)"
        LabelName="@nameof(SynsetWithGloss.Gloss)"
        DefaultValues="@(State.ChosenSynsets)"
		AllowClear>
</Select>




<Select
    Placeholder="Category"
    TItem="PunCategory"
    TItemValue="PunCategory"
    @bind-Value="@State.PunCategory">
    <SelectOptions>
        @foreach (var v in Enum.GetValues<PunCategory>().OrderBy(x=>x))
        {
            <SelectOption TItem="PunCategory" TItemValue="PunCategory" Value="@v" Label="@v.ToString()"/>
        }
    </SelectOptions>
</Select>

<br/>

<Divider/>

<br />

@if (State.PunList == null)
{
    @if (State.IsGenerating)
    {
        <Spin Spinning="true"/>
    }
    else if (State.CanGenerate)
    {
        <Button @onclick="State.Find">Punder</Button>
    }
}
else if (!State.PunList.Any())
{
    <label>No Pun Invented</label>
}

else
{
    var totalResults = State.PunList.Select(x => x.Count()).Prepend(0).Sum();

    <Collapse Bordered="false">
        @foreach (var grouping in State.PunList!)
        {
            var isSmallGroup = grouping.Count() < 4 || totalResults < 20;

            <Panel Active="@isSmallGroup">
                <HeaderTemplate>
                    <p>@grouping.Key</p>
                    @if (!isSmallGroup)
                    {
                        <p>
                            @grouping.Count()
                        </p>
                    }
                </HeaderTemplate>
                <ChildContent>
                    <AntList TItem="Pun" DataSource="@grouping">
                        <ListItem>
                            <ListItemMeta Title="@(context.NewPhrase)" Description="@(context.IsNewDifferent? context.OldPhrase : "")">
                            </ListItemMeta>
                        </ListItem>
                    </AntList>
                </ChildContent>
            </Panel>
        }
    </Collapse>
}




@code {

        const string DefaultTheme = "";

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        var punImmediately = true;

        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("theme", out var theme))
        {
            theme = DefaultTheme;
            punImmediately = false;
        }

        PunCategory? pc;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var categoryString) && Enum.TryParse(categoryString, true, out PunCategory category))
        {
            pc = category;
        }
        else
        {
            pc = null;
            punImmediately = false;
        }

        State = new PunState(theme, pc??PunCategory.Idiom, StateHasChanged);

        if (punImmediately)
           await State.Find();

        await base.OnInitializedAsync();
    }

    public PunState State { get; private set; } = null!;

    IReadOnlyCollection<string> _themeSuggestions = ThemeSuggestion.All.Value;

}