@page "/puns"
@using System.Linq
@using Microsoft.AspNetCore.WebUtilities
@using WordNet
@inject NavigationManager NavManager


<MatAutocompleteList Items="@_themeSuggestions" TItem="string" Label="Theme" OnTextChanged="s => State.Theme = s" Value="@State.Theme">@State.Theme</MatAutocompleteList>


@foreach (var synSet in State.AllSynSets)
{
    <br />
    <MatSlideToggle TValue="bool" Label="@synSet.Entity.Gloss" @bind-Value="@synSet.Chosen"></MatSlideToggle>
}
<br/>

<p>
    <MatSelectItem Label="Category" @bind-Value="@State.PunCategory" Items="@(Enum.GetValues<PunCategory>())"></MatSelectItem>
</p>

<br/>

<MatButton Disabled="@State.IsGenerating" @onclick="State.Find" Label="@(State.IsGenerating ? "Pundering" : ("Pun!"))"/>

<MatDivider/>


@if (State.PunList.Any())
{
    var totalResults = State.PunList.Select(x => x.Count()).Prepend(0).Sum();


    <MatAccordion>
        @foreach (var grouping in State.PunList)
    {
        var isSmallGroup = grouping.Count() < 4 || totalResults < 20;

        <MatExpansionPanel Expanded ="@isSmallGroup">
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>@grouping.Key</MatExpansionPanelHeader>
                    @if (!isSmallGroup)
                    {
                        <MatExpansionPanelSubHeader>
                        @grouping.Count()
                    </MatExpansionPanelSubHeader>
                    }
                </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList TwoLine="true">
                    @foreach (var pun in grouping)
                    {
                        <MatListItem >
                            <MatListItemText>
                                <MatListItemPrimaryText>@pun.NewPhrase</MatListItemPrimaryText>
                                @if(pun.IsNewDifferent)
                                {
                                    <MatListItemSecondaryText>@pun.OldPhrase</MatListItemSecondaryText>
                                }
                                else
                                {
                                    <MatListItemSecondaryText/>
                                }

                            </MatListItemText>
                        </MatListItem>
                    }
                </MatList>
            </MatExpansionPanelDetails>
            </MatExpansionPanel>
    }
    </MatAccordion>


}




@code {

        const string DefaultTheme = "Fish";

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        var punImmediately = true;

        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("theme", out var theme))
        {
            theme = DefaultTheme;
            punImmediately = false;
        }

        if (!(QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var categoryString) && Enum.TryParse(categoryString, true, out PunCategory category)))
        {
            category = PunCategory.Idiom;
            punImmediately = false;
        }

        State = new PunState(theme) { PunCategory = category };

        if (punImmediately)
            await State.Find();

        await base.OnInitializedAsync();
    }

    public PunState State { get; private set; }


    string[] _themeSuggestions = new[]
            {
                "Fish",
                "Furniture",
                "Vegetable",
                "Cake",
                "Baby"
            };

}