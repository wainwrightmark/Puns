@page "/puns"
@using System.Linq
@using Microsoft.AspNetCore.WebUtilities
@using WordNet
@inject NavigationManager _navManager
@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorage


@if (State is null)
{

}
else if (State.PunList is null)
{
<MudContainer MaxWidth="MaxWidth.Medium">
    <MudAutocomplete FullWidth="false"
                     Label="Theme"
                     Placeholder="Type any word"
                     @bind-Value="@State.Theme"
                     SearchFunc="@SearchThemes"
                     ResetValueOnEmptyText="true"
                     Variant="Variant.Outlined"
                     CoerceText="true"
                     CoerceValue="true"
                     Clearable="true"
                     AutoFocus="true"
                     InputMode="InputMode.search"
                     AdornmentIcon="@Icons.Material.Filled.Search"
                     OffsetY="true"
                     />

    <br />

    <MudChipSet Filter="true" MultiSelection="true" SelectedChipsChanged="SelectedCategoriesChanged">
        @for (var index = 0; index < State.PossibleSynsets.Count; index++)
        {
            var synset = State.PossibleSynsets[index];
        <MudChip Tag="index" Default="State.ChosenSynsets.Contains(index)" Text="@synset.Gloss" />
        }
    </MudChipSet>

    <br />

    <MudSelect FullWidth="false"
               T="PunCategory"
               Label="Category"
               Variant="Variant.Outlined"
               @bind-Value="@State.PunCategory">
        @foreach (var v in Enum.GetValues<PunCategory>().OrderBy(x => x))
        {
        <MudSelectItem Value="@v">@v.ToString()</MudSelectItem>
        }
    </MudSelect>

    <br />

    @if (State.CanGenerate && !State.IsGenerating)
    {
    <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.PlayArrow" @onclick="State.Find" />
    }
    else if (State.IsGenerating)
    {
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
    }

</MudContainer>
}

else
{
    var totalResults = State.PunList.Select(x => x.Count()).Prepend(0).Sum();

    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Inherit" Edge="Edge.False" OnClick="@State.ClearPuns"/>
    </MudAppBar>

    <MudContainer MaxWidth="MaxWidth.Medium">

        <MudList Clickable="true">

            <MudVirtualize T="IGrouping<string,Pun>" Items="State.PunList">
                @{ var isSmallGroup = context.Count() < 4 || totalResults < 20; }

                <MudListItem InitiallyExpanded="@isSmallGroup">
                    <ChildContent>


                        @if (!isSmallGroup)
                        {
                            <MudBadge Content="@context.Count()" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                                <MudText>@context.Key</MudText>
                            </MudBadge>
                        }
                        else
                        {
                            <MudText>@context.Key</MudText>
                        }
                    </ChildContent>

                    <NestedList>
                        @foreach (var pun in context)
                        {
                            <MudCard>
                                <MudCardContent>
                                    <MudText>@(pun.NewPhrase)</MudText>
                                    @if (pun.IsNewDifferent())
                                    {
                                        <MudText Typo="Typo.caption">@(pun.OldPhrase)</MudText>
                                    }
                                </MudCardContent>
                                <MudCardActions>
                                    <MudRating SelectedValueChanged="@(i => @State.SetRating(@pun, i))" SelectedValue="@State.GetRating(@pun)"/>
                                </MudCardActions>
                            </MudCard>
                        }
                    </NestedList>
                </MudListItem>


            </MudVirtualize>

        </MudList>
    </MudContainer>
}


@code {

        const string DefaultTheme = "";

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);

        var punImmediately = true;

        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("theme", out var theme))
        {
            theme = DefaultTheme;
            punImmediately = false;
        }

        PunCategory? pc;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var categoryString) && Enum.TryParse(categoryString, true, out PunCategory category))
        {
            pc = category;
        }
        else
        {
            pc = null;
            punImmediately = false;
        }

        State = new PunState(theme, pc ?? PunCategory.Idiom, StateHasChanged, _localStorage);

        if (punImmediately)
            await State.Find();

        await base.OnInitializedAsync();
    }

    public PunState State { get; private set; } = null!;

    IReadOnlyCollection<string> _themeSuggestions = ThemeSuggestion.All.Value;

    private async Task<IEnumerable<string>> SearchThemes(string value)
    {
        await Task.CompletedTask;
    // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _themeSuggestions;

        return _themeSuggestions.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void SelectedCategoriesChanged(MudChip[] obj)
    {
        var set = obj.Select(x => x.Tag).OfType<int>().ToHashSet();

        State.ChosenSynsets = set;
    }

}