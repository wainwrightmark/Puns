@page "/puns"
@using System.Linq
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavManager





<div class="themeBox">
<br/>
<label>Theme</label>
<input type="text" style="width: 100%" @bind="State.Theme"/>
<br/>
</div>




@{
    var synsets = State.SynSets;
}


@foreach (var synSet in synsets)
{

    <div class="synsetBox">
    <input type="checkbox" @bind="synSet.Chosen" />
    <label>@synSet.Entity.Gloss</label>
    <br />
    </div>

}

<br />

<div class="categoryBox">
<label>Category</label>
<select @bind="State.PunCategory">
    @foreach (var c in Enum.GetValues<PunCategory>())
    {
        <option value="@c">@c</option>
    }
</select>

</div>

<br/>

<div class="GenerateButton">
    <button disabled="@State.IsGenerating" class="btn btn-primary" @onclick="State.Find">
    @(State.IsGenerating? "Pundering" :("Pun!") )
    </button>
</div>

<br/>
<br/>
<hr/>

@if(State.PunList != null)
{
    var totalResults = State.PunList.Select(x => x.Count()).Prepend(0).Sum();

    @foreach (var grouping in State.PunList)
    {
        var isSmallGroup = grouping.Count() < 4 || totalResults < 20;

        var collapsed = !State.RevealedWords.Contains(grouping.Key);

        Action toggle = () =>
        {
            if (!State.RevealedWords.Add(grouping.Key))
                State.RevealedWords.Remove(grouping.Key);
        };

    <div hidden="@isSmallGroup" class="punHeader">
        <h2>
        @grouping.Key (@grouping.Count())
        <button @onclick="toggle">@(collapsed?"+":"-")</button>
        </h2>
    </div>



    <div hidden="@(collapsed && !isSmallGroup)" class="punGroup">
        @foreach (var pun in grouping)
    {
        <br/>
        <label>@pun.NewPhrase</label>
        <label> (@pun.OldPhrase)</label>
        <br/>
    }

    </div>


}
}




@code {

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        var punImmediately = true;

        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("theme", out var theme))
        {
            theme = "Fish";
            punImmediately = false;
        }

        PunCategory category;
        if (!(QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var categoryString) && PunCategory.TryParse(categoryString, true, out category)))
        {
            category = PunCategory.Idiom;
            punImmediately = false;
        }

        State = new PunState(theme) {PunCategory = category};

        if(punImmediately)
            await State.Find();

        await base.OnInitializedAsync();
    }

    public PunState? State { get; private set; }

}
