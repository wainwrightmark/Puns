@page "/puns"
@using System.Linq
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavManager




<MatAutocompleteList Items="@_themeSuggestions" TItem="string" Label="Theme" OnTextChanged="s => State.Theme = s" Value="@State.Theme">@State.Theme</MatAutocompleteList>




@foreach (var synSet in State.SynSets)
{
    <br />
    <MatSlideToggle TValue="bool" Label="@synSet.Entity.Gloss" @bind-Value="@synSet.Chosen"></MatSlideToggle>
}

<br/>

<p>
    <MatSelectItem Label="Category" @bind-Value="@State.PunCategory" Items="@(Enum.GetValues<PunCategory>())"></MatSelectItem>
</p>

<br/>

<MatButton Disabled="@State.IsGenerating" @onclick="State.Find" Label="@(State.IsGenerating ? "Pundering" : ("Pun!"))"/>


<br/>
<br/>
<hr/>

@if (State.PunList != null)
{
    var totalResults = State.PunList.Select(x => x.Entity.Count()).Prepend(0).Sum();

    @foreach (var choice in State.PunList)
    {
        var grouping = choice.Entity;
        var isSmallGroup = grouping.Count() < 4 || totalResults < 20;

        <div hidden="@isSmallGroup" class="punHeader">
            <h2>
                @grouping.Key (@grouping.Count())
            </h2>
            <input type="checkbox" @bind="choice.Chosen"/>
        </div>

        <div hidden="@(!choice.Chosen && !isSmallGroup)" class="punGroup">
            @foreach (var pun in grouping)
            {
                <br/>
                <label>@pun.NewPhrase</label>
                <label> (@pun.OldPhrase)</label>
                <br/>
            }

        </div>
    }
}




@code {

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        var punImmediately = true;

        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("theme", out var theme))
        {
            theme = "Fish";
            punImmediately = false;
        }

        if (!(QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var categoryString) && PunCategory.TryParse(categoryString, true, out PunCategory category)))
        {
            category = PunCategory.Idiom;
            punImmediately = false;
        }

        State = new PunState(theme) { PunCategory = category };

        if (punImmediately)
            await State.Find();

        await base.OnInitializedAsync();
    }

    public PunState State { get; private set; }


    string[] _themeSuggestions = new[]
            {
                "Fish",
                "Furniture",
                "Vegetable",
                "Cake",
                "Baby"
            };

}